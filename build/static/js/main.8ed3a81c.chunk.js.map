{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todolocal","parse","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ed3a81c.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Form = ({ setInputText, todos, setTodos, inputText, setStatus }) => {\n    // QUI TI SCRIVI IL CODICE IN JS\n    // TERRY TI DEVI SPAVENTAAAAARE\n    const inputTextHandler = (e) => {\n        setInputText(e.target.value);\n    };\n    const submitTodoHandler = (e) => {\n        e.preventDefault();\n        setTodos([\n            ...todos, \n            {text: inputText,\n            completed: false, id: Math.random() * 1000 }\n        ])\n    setInputText = (\"\");\n    };\n    const statusHandler = (e) => {\n        setStatus(e.target.value);\n    }\n    return (\n        <form>\n         <input \n         value={inputText}\n         onChange={inputTextHandler} \n         type=\"text\" \n         className=\"todo-input\" />\n         <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n             <i className=\"fa fa-plus-square\"></i>\n         </button>\n         <div className=\"select\">\n          <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n             <option value=\"all\">ALL</option>\n             <option value=\"completed\">Completed</option>\n             <option value=\"uncompleted\">Uncompleted</option>\n          </select>\n         </div>\n        </form>\n    );\n};\n\nexport default Form;","import React from 'react';\n\n\n\n\nconst Todo = ({text,todo,todos,setTodos}) => {\n    // EVENTS\n    const deleteHandler = () => {\n        setTodos(todos.filter((el) => el.id !== todo.id));\n    };\n      const completeHandler = () => {\n        setTodos(todos.map(item => {\n          if(item.id === todo.id){\n             return{\n                ...item, completed: !item.completed\n             };\n          }\n          return item;\n        })\n      );\n    };\n\n    return (\n        <div className=\"todo\">\n           <li className={`todo-item ${todo.completed ? \"completed\":\"\"}`}>{text}</li> \n           <button onClick={completeHandler} className=\"complete-btn\">\n               <i className=\"fa fa-check\"></i>\n           </button>\n\n           <button \n           onClick={deleteHandler}\n           className=\"trash-btn\">\n               <i className=\"fa fa-trash\"></i>\n            </button> \n        </div>\n    );\n};\n\nexport default Todo;\n","import React from 'react';\nimport Todo from './Todo';\n\n\n\nconst TodoList = ({todos,setTodos, filteredTodos}) => {\n    \n    return (\n        <div className=\"todo-container\">\n          <ul className=\"todo-list\">\n            {filteredTodos.map((todo) => (\n                <Todo \n                setTodos={setTodos}\n                todos={todos}\n                text={todo.text}\n                todo={todo}\n                key={todo.id}\n                 />\n            ))}\n          </ul>  \n        </div>\n    );\n};\n\nexport default TodoList;\n","import React from 'react';\nimport {useState, useEffect}  from 'react';\nimport './App.css';\nimport Form from './components/Form'\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n  \n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  \n  useEffect(() => {\n    getLocalTodos();\n  }, []);\n\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]);\n\n  const filterHandler = () => {\n    switch(status){\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n       case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n       default:\n         setFilteredTodos(todos);\n         break;\n      }\n  };\n\n  const saveLocalTodos = () => {\n      localStorage.setItem(\"todos\", JSON.stringify(todos));\n  };\n\n  const getLocalTodos = () => {\n    if(localStorage.getItem(\"todos\") ===null){\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    }else{\n    let todolocal = JSON.parse(localStorage.getItem(\"todos\"));\n    setTodos(todolocal);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Interlist</h1><h6 className=\"verly\">By VerlyDesign</h6>\n      </header>\n        <Form \n        inputText={inputText}\n        todos={todos}\n        setTodos={setTodos}\n        setInputText={setInputText} \n        setStatus={setStatus}\n        />\n        <TodoList \n        filteredTodos={filteredTodos}\n        setTodos={setTodos}\n        todos={todos} \n        />\n      <div className=\"logo-container\"> \n    <img\n          className=\"logo\"\n          src=\"https://i.pinimg.com/originals/c0/eb/a2/c0eba234bc326b8eecfabad532c944d7.png\"\n          alt=\"logo\"\n        />\n    </div>\n    </div>\n    \n  );\n}\n\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}